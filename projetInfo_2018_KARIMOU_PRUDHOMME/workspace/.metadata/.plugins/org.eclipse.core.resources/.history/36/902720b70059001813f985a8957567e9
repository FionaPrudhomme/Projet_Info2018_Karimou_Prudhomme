package calendrier;

import javax.swing.JButton;
import javax.swing.JFrame;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
//import java.awt.event.MouseEvent;
//import java.awt.event.MouseListener;
import java.util.Calendar;
import java.util.GregorianCalendar;
import javax.swing.BorderFactory;
import javax.swing.JComboBox;
import javax.swing.JPanel;

public class Planning extends JFrame {
	
	
	private static final long serialVersionUID = 7566857317049112914L;
	protected int yy;
	protected int mm, dd;
	protected JButton labs[][]; // Boutons a afficher
	protected int leadGap = 0;
	Calendar calendar = new GregorianCalendar(); // objet calendrier

	protected final int thisYear = calendar.get(Calendar.YEAR);
	protected final int thisMonth = calendar.get(Calendar.MONTH);

  /** One of the buttons. We just keep its reference for getBackground(). */
	private JButton b0;
	private JComboBox<String> monthChoice;  /** The month choice */
	private JComboBox<String> yearChoice;   /** The year choice */
	// Construire un calendrier a partir d'aujourdhui
	public Planning() {
		super();
		setYYMMDD(calendar.get(Calendar.YEAR), calendar.get(Calendar.MONTH),
        calendar.get(Calendar.DAY_OF_MONTH));
		buildGUI();
		recompute();
	}

	public Planning(int year, int month, int today) {
		super();
		setYYMMDD(year, month, today);
		buildGUI();
		recompute();
	}
	
	private void setYYMMDD(int year, int month, int today) {
		yy = year;
		mm = month;
		dd = today;
	}

	 String [] mois = { "Janvier" , "Février" , "Mars" , "Avril" , "Mai" , "Juin" ,   "Juillet" , "Août" , "Septembre" , "Octobre" , "Novembre" , "Décembre" };
	 
	 // Construire l'interface graphique. Suppose que setYYMMDD a été appelé.
     //bp.add(labs[i][j] = new JButton(""));
private void buildGUI() {
		 getAccessibleContext().setAccessibleDescription( "Calendrier pas encore accessible! ");
		 setBorder(BorderFactory.createEtchedBorder());
		 setLayout(new BorderLayout());
		 JPanel tp = new JPanel();
		 tp.add(monthChoice = new JComboBox<String>());
		 for (int i = 0; i < mois.length; i++)
			monthChoice.addItem(mois[i]);
		 	monthChoice.setSelectedItem(mois[mm]);
		 	monthChoice.addActionListener(new ActionListener() {
		 		public void actionPerformed(ActionEvent ae) {
		 			int i = monthChoice.getSelectedIndex();
		 			if (i >= 0) {
		 				mm = i+1;
		 				System.out.println("Month=" + mm);
		 				recompute();
		 			}
		 		}
		 	});
		 	monthChoice.getAccessibleContext().setAccessibleName("Months");
		 	monthChoice.getAccessibleContext().setAccessibleDescription( "Choose a month of the year");
		 	tp.add(yearChoice = new JComboBox<String>());
		 	yearChoice.setEditable(true);
		 	for (int i = yy - 5; i < yy + 5; i++)
		 		yearChoice.addItem(Integer.toString(i));
		 		yearChoice.setSelectedItem(Integer.toString(yy));
		 		yearChoice.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent ae) {
        int i = yearChoice.getSelectedIndex();
        if (i >= 0) {
          yy = Integer.parseInt(yearChoice.getSelectedItem().toString());
           System.out.println("Year=" + yy);
          recompute();
        }
      }
      
    });
    add(BorderLayout.CENTER, tp);

    JPanel bp = new JPanel();
    bp.setLayout(new GridLayout(7, 7));
    labs = new JButton[6][7]; //premiere ligne : jour

    bp.add(b0 = new JButton("L"));
    bp.add(new JButton("M"));
    bp.add(new JButton("M"));
    bp.add(new JButton("J"));
    bp.add(new JButton("V"));
    bp.add(new JButton("S"));
    bp.add(new JButton("D"));

    ActionListener dateSetter = new ActionListener() {
      public void actionPerformed(ActionEvent e) {
        String num = e.getActionCommand();
        if (!num.equals("")) {
          // set the current day highlighted
          setDayActive(Integer.parseInt(num));
        }
      }
    };
    
      
    // Construis tous les boutons et les ajoute
    for (int i = 0; i < 6; i++){
      for (int j = 0; j < 7; j++) {
        bp.add(labs[i][j] = new JButton(""));
        labs[i][j].addActionListener(dateSetter);
        //labs[i][j].addMouseListener(new GetDayCalendarEvent(labs[i][j]));
        //labs1[i][j].addActionListener(monthSetter);
        //labs1[i][j].addMouseListener(new GetMonthCalendarEvent(labs1[i][j]));
      }
    }
    add(BorderLayout.SOUTH, bp);
    
    System.out.println("Month=" + mm + "Year" + yy);

  }


public final static int dom[] = { 31, 28, 31, 30, /* jan feb mar apr */31, 30, 31, 31, /* may jun jul aug */30, 31, 30, 31 /* sep oct nov dec */
  };

  /** Compute which days to put where, in the Cal panel */
  protected void recompute() {
	 
	  
    //System.out.println("Calendrier::recompute: "  +yy + "/" + mm + "/" + dd);
    if (mm < 0 || mm > 12)
      throw new IllegalArgumentException("Month " + mm + " bad, must be 1-13");
    clearDayActive();
    calendar = new GregorianCalendar(yy, mm, dd);
    leadGap = new GregorianCalendar(yy, mm, 1).get(Calendar.DAY_OF_WEEK) - 1;
     System.out.println("leadGap = " + leadGap);
    System.out.println("Calendrier: "  +yy + "/" + mm + "/" + dd);
    
    AfficheDate pann = new AfficheDate(yy,mm,dd);
    System.out.println("Calendrier: "  +yy + mm + dd);


    int daysInMonth = dom[mm];
    if (isLeap(calendar.get(Calendar.YEAR)) && mm == 1)
    if (isLeap(calendar.get(Calendar.YEAR)) && mm > 1)
      ++daysInMonth;
    for (int i = 0; i < leadGap; i++) {
      labs[0][i].setText("");
    }
    for (int i = 1; i <= daysInMonth; i++) {
      JButton b = labs[(leadGap + i - 1) / 7][(leadGap + i - 1) % 7];
      b.setText(Integer.toString(i));
    }
    for (int i = leadGap + 1 + daysInMonth; i < 6 * 7; i++) {
      labs[(i) / 7][(i) % 7].setText("");
    }    
    
  }

  /**
   * isLeap() returns true if the given year is a Leap Year.
*/
  public boolean isLeap(int year) {
    if (year % 4 == 0 && year % 100 != 0 || year % 400 == 0)
      return true;
    return false;
  }

  /** Set the year, month, and day */
  public void setDate(int yy, int mm, int dd) {
     System.out.println("Cal::setDate");
    this.yy = yy;
    this.mm = mm; // starts at 0, like Date
    this.dd = dd;
    recompute();
  }

  /** Unset any previously highlighted day */
  private void clearDayActive() {
    JButton b;

    // First un-shade the previously-selected square, if any
    if (activeDay > 0) {
      b = labs[(leadGap + activeDay - 1) / 7][(leadGap + activeDay - 1) % 7];
      b.setBackground(b0.getBackground());
      b.repaint();
      activeDay = -1;
    }
  }
 
  private int activeDay = -1;

  /** Set just the day, on the current month */
  public void setDayActive(int newDay) {

    clearDayActive();

    // Set the new one
    if (newDay <= 0)
      dd = new GregorianCalendar().get(Calendar.DAY_OF_MONTH);
    else
      dd = newDay;
    // Now shade the correct square
    Component square = labs[(leadGap + newDay - 1) / 7][(leadGap + newDay - 1) % 7];
    square.setBackground(Color.green);
    square.repaint();
    activeDay = newDay;
  }
  

  /** For testing, a main program */
  public static void main(String[] av) {
	  JFrame f = new JFrame("Calendrier");
	  Container c = f.getContentPane();
	  c.setLayout(new FlowLayout());
	  c.add(new Planning());
	  f.pack();
	  f.setVisible(true);
  }


}
